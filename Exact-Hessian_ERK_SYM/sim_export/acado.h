/*
 *    This file was auto-generated by ACADO Code Generation Tool.
 *    
 *    ACADO Code Generation tool is a sub-package of ACADO toolkit --
 *    A Toolkit for Automatic Control and Dynamic Optimization.
 *    Copyright (C) 2008-2013 by Boris Houska, Hans Joachim Ferreau,
 *    Milan Vukov, Rien Quirynen, KU Leuven.
 *    Developed within the Optimization in Engineering Center (OPTEC)
 *    under supervision of Moritz Diehl. All rights reserved.
 *    
 *    ACADO Toolkit is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 3 of the License, or (at your option) any later version.
 *    
 *    ACADO Toolkit is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *    
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with ACADO Toolkit; if not, write to the Free Software
 *    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *    
 */


#include <stdio.h>
#include <math.h>
#if (defined WIN32 || defined _WIN64)
#include <windows.h>
#else
#include <time.h>
#include <sys/stat.h>
#include <sys/time.h>
#endif

#ifndef ACADO_H
#define ACADO_H

typedef double real_t;


/* COMMON DEFINITIONS:              */
/* -------------------------------- */




/* Number of control intervals */
#define ACADO_N   1
/* Number of differential states */
#define ACADO_NX  8
/* Number of differential state derivatives */
#define ACADO_NDX  8
/* Number of algebraic states */
#define ACADO_NXA  0
/* Number of controls */
#define ACADO_NU  2
/* Number of parameters */
#define ACADO_NP  0
/* Number of output functions */
#define NUM_OUTPUTS  0


/* GLOBAL VARIABLES:                */
/* -------------------------------- */
typedef struct ACADOvariables_ {

} ACADOvariables;


/* GLOBAL WORKSPACE:                */
/* -------------------------------- */
typedef struct ACADOworkspace_ {
real_t rk_dim16_swap;

/** Column vector of size: 16 */
real_t rk_dim16_bPerm[ 16 ];

/** Column vector of size: 72 */
real_t acado_aux[ 72 ];

real_t rk_ttt;

/** Row vector of size: 18 */
real_t rk_xxx[ 18 ];

/** Matrix of size: 8 x 2 (row major format) */
real_t rk_kkk[ 16 ];

/** Matrix of size: 16 x 16 (row major format) */
real_t rk_A[ 256 ];

/** Column vector of size: 16 */
real_t rk_b[ 16 ];

/** Row vector of size: 16 */
int rk_dim16_perm[ 16 ];

/** Column vector of size: 16 */
real_t rk_rhsTemp[ 16 ];

/** Matrix of size: 2 x 144 (row major format) */
real_t rk_diffsTemp2[ 288 ];

/** Matrix of size: 8 x 2 (row major format) */
real_t rk_diffK[ 16 ];

/** Matrix of size: 8 x 10 (row major format) */
real_t rk_diffsPrev2[ 80 ];

/** Matrix of size: 8 x 10 (row major format) */
real_t rk_diffsNew2[ 80 ];


} ACADOworkspace;


/* GLOBAL FORWARD DECLARATIONS:          */
/* ------------------------------------- */

/** Performs the integration and sensitivity propagation for one shooting interval.
 *
 *  \param rk_eta Working array to pass the input values and return the results.
 *  \param resetIntegrator The internal memory of the integrator can be reset.
 *
 *  \return Status code of the integrator.
 */
int integrate( real_t* const rk_eta, int resetIntegrator );

/** Export of an ACADO symbolic function.
 *
 *  \param in Input to the exported function.
 *  \param out Output of the exported function.
 */
void acado_rhs(const real_t* in, real_t* out);
/* ------------------------------------- */


/* EXTERN DECLARATIONS:                  */
/* ------------------------------------- */
extern ACADOworkspace acadoWorkspace;
extern ACADOvariables acadoVariables;
/* ------------------------------------- */
#endif

/* END OF FILE. */

