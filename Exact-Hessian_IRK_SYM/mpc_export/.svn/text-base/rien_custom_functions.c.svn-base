/*
 *    This file was auto-generated by ACADO Code Generation Tool.
 *    
 *    ACADO Code Generation tool is a sub-package of ACADO toolkit --
 *    A Toolkit for Automatic Control and Dynamic Optimization.
 *    Copyright (C) 2008-2013 by Boris Houska, Hans Joachim Ferreau,
 *    Milan Vukov, Rien Quirynen, KU Leuven.
 *    Developed within the Optimization in Engineering Center (OPTEC)
 *    under supervision of Moritz Diehl. All rights reserved.
 *    
 *    ACADO Toolkit is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 3 of the License, or (at your option) any later version.
 *    
 *    ACADO Toolkit is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *    
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with ACADO Toolkit; if not, write to the Free Software
 *    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *    
 */


#include "rien_custom_functions.h"
#include "acado_auxiliary_functions.h"

#include <stdio.h>

void perform_integration( int lRun1 )
{
	timer tmr;
	
	int i, j, k;
	
	tic( &tmr );
	for( i = 0; i < ACADO_NX; i++ ) {
		acadoWorkspace.state[i] = acadoVariables.x[lRun1 * ACADO_NX+i];
	}
	for( i = 0; i < ACADO_NU; i++ ) {
		acadoWorkspace.state[ACADO_NX*(1+ACADO_NX+ACADO_NU)+i] = acadoVariables.u[lRun1 * ACADO_NU+i];
	}

	integrate(acadoWorkspace.state, 1);

	for( i = 0; i < ACADO_NX; i++ ) {
		acadoWorkspace.d[lRun1 * ACADO_NX+i] = acadoWorkspace.state[i] - acadoVariables.x[(lRun1+1) * ACADO_NX + i];
	}

	for( i = 0; i < ACADO_NX*ACADO_NX; i++ ) {
		acadoWorkspace.evGx[lRun1 * ACADO_NX*ACADO_NX+i] = acadoWorkspace.state[ACADO_NX+i];
	}

	for( i = 0; i < ACADO_NX*ACADO_NU; i++ ) {
		acadoWorkspace.evGu[lRun1 * ACADO_NX*ACADO_NU+i] = acadoWorkspace.state[ACADO_NX*(1+ACADO_NX)+i];
	}
	
	modelTime += toc( &tmr );
	
}

/* CUSTOM WRITTEN  (partly copy-pasted) */
void modelSimulation(  )
{
int lRun1;
modelTime = 0;

//~ printMatrix( "x0", acadoVariables.x0, 1, ACADO_NX );
//~ printMatrix( "x", acadoVariables.x, ACADO_N+1, ACADO_NX );
//~ printMatrix( "u", acadoVariables.u, ACADO_N, ACADO_NU );
//~ printMatrix( "z", DMS.z, ACADO_N, ACADO_NZ1+ACADO_NZ2 );
//~ printMatrix( "y", acadoVariables.y, ACADO_N, ACADO_NY );
//~ printMatrix( "yN", acadoVariables.yN, 1, ACADO_NYN );
//~ printMatrix( "W", acadoVariables.W, ACADO_NY, ACADO_NY );
//~ printMatrix( "WN", acadoVariables.WN, ACADO_NYN, ACADO_NYN );

for (lRun1 = 0; lRun1 < 20; ++lRun1)
{
	perform_integration( lRun1 );
}
}

/* CUSTOM WRITTEN */
void preparationStep(  )
{
timer tmr;

modelSimulation(  );

tic( &tmr );
evaluateObjective(  );
condensePrep(  );
condenseTime = toc( &tmr );
}

/* CUSTOM WRITTEN */
int feedbackStep(  )
{
int tmp;
timer tmr;

tic( &tmr );
condenseFdb(  );
condenseTime += toc( &tmr );

tic( &tmr );
tmp = solve( );
qpTime = toc( &tmr );

tic( &tmr );
expand(  );
condenseTime += toc( &tmr );

return tmp;
}
